/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
	 	
	// A reg logic
	Mux16(a[0..14]=instruction[0..14], a[15]=false, b=aluout, sel=instruction[15], out=amuxout);
	And(a=instruction[15], b=instruction[5], out=ainstload);
	Not(in=instruction[15], out=notmsbinst);
	Or(a=notmsbinst, b= ainstload, out=aload);
	ARegister(in=amuxout, load=aload, out=areg, out[0..14]=addressM);
	
	//ALU logic
	Mux16(a=areg, b=inM, sel=instruction[12], out=amreg);
	And(a=instruction[15..15], b=instruction[4], out=dload);
	DRegister(in=aluout, load=dload, out=dreg);
    ExtendAlu(x=dreg, y=amreg, instruction=instruction[6..14], out=outM, out=aluout, zr=zr, ng=ng);
	And(a=instruction[15], b=instruction[3], out=writeM);

	//PC logic
	PCcontrol(zr=zr, ng=ng, jumpbits=instruction[0..2], instmsb=instruction[15], load=pcload);
	PC(in=areg, load=pcload, inc=true, reset=reset, out[0..14]=pc);
}
