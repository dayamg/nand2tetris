/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
	 Mul(a=x, b=y,out=mulout);
	 Mux16(a=y, b=x, sel=instruction[4], out=shiftmuxout);
	 ShiftRight(in=shiftmuxout,out=shiftrightout);
	 ShiftLeft(in=shiftmuxout,out=shiftleftout);
	 ALU(x=x, y=y, zx=instruction[5] ,nx=instruction[4], zy=instruction[3] , ny=instruction[2], f=instruction[1], no=instruction[0], out=aluout, zr=zr1, ng=ng1);
	 Mux16(a=shiftrightout, b=shiftleftout, sel=instruction[5], out=shiftout);
	 Mux16(a=shiftout, b=aluout, sel=instruction[8], out=mux8out);
	 Mux16(a=mulout, b=mux8out, sel=instruction[7], out=out, out=outtemp, out[15]=ng);
	 Or16Way(in=outtemp, out=nzr);
	 Not(in=nzr, out=zr);
 
}
