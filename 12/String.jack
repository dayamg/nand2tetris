// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int max_length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let max_length = maxLength;
        if (max_length > 0) {
            let str = Array.new(max_length);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (max_length > 0) {
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        var char c;
        let c = str[j];
        return c;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if ((length + 1) > max_length){
            return this;
        }
        let str[length] = c;
        let length = length + 1;
        return this;

    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0){
            let length = length - 1;
        }
        return;
    }


    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i;
        var boolean is_neg;

        let val = 0;
        let i = 0;
        let is_neg = false;

        // check if start with a '-', so negative.
        if (length > 0){
            if (str[0] = 45){
                let is_neg = true;
                let i = 1;
            }
        }

        // convert to int until non digit char.
        while (i < length){
            if (~(String.is_digit(str[i]))){
                if (is_neg){
                    return -val;
                }
                return val;
            }
            let val = val * 10 + (str[i] - 48);
            let i = i + 1;
        }

        if (is_neg){
           return -val;
        }
        return val;
    }


    /** check if a char ia a digit */
    function boolean is_digit(char c){
        return ((c > 47) & (c < 58));
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        // handle minus sign.
        if (val < 0){
            do appendChar(45);
            let val = -val;
        }

        do setIntHelper(val);
        return;
    }

    /** helper method for setInt recursion. */
    method void setIntHelper(int val) {
        var int last_digit, c;
        if (val < 10){
            do appendChar(val + 48);
            return;
        }

        let last_digit = Math.abs(val-(10*(val/10)));
        let c = last_digit + 48;
        let val = val / 10;
        do setIntHelper(val);
        do appendChar(c);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
