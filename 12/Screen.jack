/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean currentColor;
    static Array screen;

    /** Initializes the Screen. */
    function void init() {
        let currentColor = true;  // set as black pixel
        let screen = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int cellCounter;
        let cellCounter = 0;
        while (cellCounter < 8192) {
            let screen[cellCounter] = false;  // make it white
            let cellCounter = cellCounter + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mask;
        let address = Math.multiplyByPowerOfTwo(y, 5) + Math.divide(x, 16); // 32 * y + x / 16
        let value = screen[address];
        let mask = Math.powerOfTwo(x & 15);  // mask is the (x % 16)th bit of x

        if (currentColor) {
            let screen[address] = mask | screen[address]; // if current color is black, apply "or"
            return;
        }

        let screen[address] = (~mask) & screen[address];  // if current color is black, apply "and"
        return;
    }

    /** Draws a horizontal line, where x1 is the left end, and x2 is the second end. A line has two ends, but life has
     *   only one. We assume x1 <= x2. */
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int addressX1, addressX2, addressCounter, x1Mod16, x2Mod16;
        let addressX1 =  Math.multiplyByPowerOfTwo(y, 5) + Math.divide(x1, 16);
        let addressX2 =  Math.multiplyByPowerOfTwo(y, 5) + Math.divide(x2, 16);
        let x1Mod16 = x1 & 15;
        let x2Mod16 = x2 & 15;
        if (addressX1 = addressX2) {
            do Screen.drawHorizontalShort(addressX1, x1Mod16, x2Mod16);
            return;
        }

        /// Draw the line inside the address addressX1. Last pixel in addressX1 is 15
        do Screen.drawHorizontalShort(addressX1, x1Mod16, 15);

        let addressCounter = addressX1 + 1;
        while (addressCounter < addressX2) { /// color black or white entirely all pixels in between
            let screen[addressCounter] = currentColor;
            let addressCounter = addressCounter + 1;
        }

        /// Draw the end of the line, inside of the address of x2. The first pixel in addressX2 is 0
        do Screen.drawHorizontalShort(addressX2, 0, x2Mod16);

        return;
    }

     /** Draws a horizontal line in one address, i.e., a short line in which both ends fall into the same address.
      *  We assume x1Mod16 <= x2Mod16, where both are numbers between 0 and 15. */
    function void drawHorizontalShort(int address, int x1Mod16, int x2Mod16) {
        var int mask, xCounter;

        let xCounter = x1Mod16;
        while (~(xCounter > x2Mod16)) { /// Same as draw pixel, but as we already know the address, we shorten it
            let mask = Math.powerOfTwo(xCounter & 15);
            if (currentColor) {
                let screen[address] = mask | screen[address];
            }
            else {
                let screen[address] = (~mask) & screen[address];
            }
            let xCounter = xCounter + 1;
        }
        return;
    }

    /** Draws a vertical line, assuming y1 <= y2.   */
    function void drawVerticalLine(int x, int y1, int y2) {
        var int yCounter;
        let yCounter = y1;
        while (~(yCounter > y2)) {
            do Screen.drawPixel(x, yCounter);
            let yCounter = yCounter + 1;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, Math.min(y1, y2), Math.max(y1, y2));
            return;
        }

        if (y1 = y2) {
            do Screen.drawHorizontalLine(Math.min(x1, x2), Math.max(x1, x2), y1);
            return;
        }

        if ((x1 < x2) & (y1 < y2)) {
            do Screen.drawNorthEastLine(x1, y1, x2 - x1, y2 - y1);
            return;
        }

        if ((x2 < x1) & (y2 < y1)) {
            do Screen.drawNorthEastLine(x2, y2, x1 - x2, y1 - y2);
            return;
        }

        if ((x2 < x1) & (y1 < y2)) {
            do Screen.drawSouthEastLine(x2, y2, x1 - x2, y1 - y2);
            return;
        }

        else { /// x1 < x2 and y2 < y1
            do Screen.drawSouthEastLine(x1, y1, x2 - x1, y2 - y1);
            return;
        }
    }

    /** Draws a diagonal line from pixel (x,y) to pixel (x+dx,y+dy), assuming dx, dy > 0. */
    function void drawNorthEastLine(int x, int y, int dx, int dy) {
        var int a, b, AdyMinusBdx;
        let AdyMinusBdx = 0;
        let a = 0;
        let b = 0;
        do Screen.drawPixel(x, y);

        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x + a, y + b);

            /// Update to see if we are above or below the theoretical line
            if (AdyMinusBdx < 0) {
                let a = a + 1;
                let AdyMinusBdx = AdyMinusBdx + dy;
            }
            else {
                let b = b + 1;
                let AdyMinusBdx = AdyMinusBdx - dx;
            }
        }
        return;
    }

    /** Draws a diagonal line from pixel (x,y) to pixel (x+dx,y+dy), assuming dx > 0, dy < 0. */
    function void drawSouthEastLine(int x, int y, int dx, int dy) {
        var int a, b, AdyMinusBdx;
        let AdyMinusBdx = 0;
        let a = 0;
        let b = 0;
        do Screen.drawPixel(x, y);

        while ((~(a > dx)) & (~(b < dy))) {
            do Screen.drawPixel(x + a, y + b);

            /// Update to see if we are above or below the theoretical line.
            if (AdyMinusBdx < 0) { // Here is the difference - we switch b to -b and dy to -dy
                let a = a + 1;
                let AdyMinusBdx = AdyMinusBdx - dy;
            }
            else {
                let b = b - 1;
                let AdyMinusBdx = AdyMinusBdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int lineCounter;

        let lineCounter = y1;
        while (~(lineCounter > y2)) {
            do Screen.drawHorizontalLine(x1, x2, lineCounter);
            let lineCounter = lineCounter + 1;
        }
        return;

    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, sinusTimesR;
        let dy = -r;
        while (~(dy > r)) {
            let sinusTimesR = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawHorizontalLine(x - sinusTimesR, x + sinusTimesR, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
