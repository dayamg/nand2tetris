
/** Implements a graphical snake as a chain of links. */
class Snake{
   field Array snakeLinksArr;
   field int linksMuxNumber;
   field int linksNumber;
   field int linkSize;

     /** Constructs a new Snake. */
   constructor Snake new() {
      let linksMuxNumber = 130; // num of snake links the screen can hold.
	  let linksNumber = 3;
	  let linkSize = 32;
	  let snakeLinksArr = Array.new(linksMuxNumber); // constructs the array
      let snakeLinksArr[0] = SnakeLink.new(2*linkSize, 0, linkSize);
      let snakeLinksArr[1] = SnakeLink.new(linkSize, 0, linkSize);
      let snakeLinksArr[2] = SnakeLink.new(0, 0, linkSize);
      return this;
   }

   /** Disposes this snake. */
   method void dispose() {
	  var int i;
	  var SnakeLink link;
	  let i = 0;
      while (i < linksNumber) {
         let link = snakeLinksArr[i];
         do link.dispose();
         let i = i + 1;
      } 
      do snakeLinksArr.dispose();
      do Memory.deAlloc(this);
      return;
   }

	/** Moves the Snake up. */
	method void moveUp() {
		var SnakeLink link;
		do moveTail();
		let link = snakeLinksArr[0];
		do link.moveUp();
		return;
	}

   /** Moves the Snake down. */
   method void moveDown() {
		var SnakeLink link;
		do moveTail();
		let link = snakeLinksArr[0];
		do link.moveDown();
		return;
   }

   /** Moves the Snake left. */
   method void moveLeft() {
		var SnakeLink link;
		do moveTail();
		let link = snakeLinksArr[0];
		do link.moveLeft();
		return;
   }

   /** Moves the Snake right. */
   method void moveRight() {
	    var SnakeLink link;
		do moveTail();
		let link = snakeLinksArr[0];
		do link.moveRight();
		return;
   }
   
   /** Move the tail of the snake according to previos link. */
   method void moveTail(){
	   	var int i, xTemp, yTemp;
		var SnakeLink link;
		let i = linksNumber-1;
		let link = snakeLinksArr[linksNumber-1];
		do link.erase();
		while (i > 0) {
			let link = snakeLinksArr[i-1];
			let xTemp = link.xLocGetter(); 
			let yTemp = link.yLocGetter();
			let link = snakeLinksArr[i];			
			do link.xLocSetter(xTemp);
			do link.yLocSetter(yTemp);
			let i = i - 1;
		}
		return;
   }
	
	/** Grow the snake by one link at the end. */
	method void grow(){
		var int lastLinkXLoc, lastLinkYLoc;
		var SnakeLink lastLink;
		if ((linksNumber+1) < linksMuxNumber){
			let lastLink = snakeLinksArr[(linksNumber-1)];
			let lastLinkXLoc = lastLink.xLocGetter();
			let lastLinkYLoc = lastLink.yLocGetter();
			let snakeLinksArr[linksNumber] = SnakeLink.new(lastLinkXLoc, lastLinkYLoc, linkSize);
			let linksNumber = linksNumber + 1; 
		}	
		return;
	}
	
	/** Check if the snake head link hit the rest of its links, return true or false accordingly. */
	method boolean hitItself(){
        var int firstXloc, firstYloc;
		let firstLink = snakeLinksArr[0];
		let firstXloc = firstLink.xLocGetter();
		let firstYloc = firstLink.yLocGetter();
		return checkIfEmpty(firstXloc, firstYloc);
	}

    ///** checks if the given square (in format {0-15,0-7}) is empty **///
   method boolean checkIfEmpty(int givenXLock, int givenYLock){

      var SnakeLink link;
      var int i, otherXloc, otherYloc;
	  let i = 1;  /// the head block is considered empty, so i = 1.
      while (i < linksNumber) {
      	    let link = snakeLinksArr[i];
			let otherXloc = link.xLocGetter();
			let otherYloc = link.yLocGetter();
			if ((givenXLock = otherXloc)&(givenYLock = otherYloc)){
				return true;
			}
			let i = i + 1;
		}
		return false;
      }

      }


   }
   
}

