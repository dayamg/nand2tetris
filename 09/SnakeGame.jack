
class SnakeGame {
   field int FOOD_INCREMENT;
   let FOOD_INCREMENT = 20; /// const. var. for delay between appearance of two foods
   field int moveCounter;  /// counts the moves, so every 20 moves there will appear a new food
   field boolean isThereFoodNow;   /// a boolean variable for tracking existence of food on the board

   field Snake snake; // the snek of this game
   field int direction; // the snek's current direction:
                        // 0=none, 1=up, 2=down, 3=left, 4=right
   field int prevDirection; // the snek's previous direction:


   /** Constructs a new snek Game. */
   constructor SnakeGame new() {
      let snake = Snake.new();  /// Our new child-snek is born. Mazal Tov.
      let direction = 0;  /// initial state is no movement
      let prevDirection = 0;  /// initial state is no movement

      let moveCounter = 0;  /// move counter is initial 0
      let isThereFoodNow = 0;  /// in the beginning, earth was formless and empty, no food. snek hungry.
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do snake.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the snake in the current direction. */
   method void moveSnake() {
      if (direction = 1 & ~(prevDirection = 2)) /// Do not allow going backwards {
        do snake.moveUp();
        let prevDirection = 1;
       }
      if (direction = 2 & ~(prevDirection = 1)) {
           do snake.moveDown();
           let prevDirection = 2;
       }
      if (direction = 3 & ~(prevDirection = 4)) {
        do snake.moveLeft();
        let prevDirection = 3;
      }
      if (direction = 4 & ~(prevDirection = 3) {
        do snake.moveRight();
        let prevDirection = 4
      }
      else {
      let direction = prevDirection /// if there was no movement, restore the previous value of direction
      }
      do Sys.wait(80);  // delays the next movement
      let moveCounter = moveCounter + 1;
      return;
   }

   /** Runs the game: handles the user's inputs and moves the snake accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;

      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do moveSnake();
         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveSnake();
         }
     } // while
     return;
   }


   /** Generates a pseudo-random number from 0 to the given maximum number, using some random variable helper **/
   ///  ...in order to make sure that we will eventually go through every number possible ///
   method int generatePseudoRandom(int n, int randVar) {
       var int rand3;
       var int rand7;
       let rand3 = mod(moveCounter, 3)  ///rand3 is a pseudo-random 3-remainder
       let rand7 = mod(moveCounter, 7)  ///rand3 is a pseudo-random 7-remainder

       var int nThirds;
       var int nSevenths;
       let nThirds = (n*rand3)/3;
       let nSeventh = (n*rand7)/7;

       var int tempNum;
       let tempNum = (nThirds + nSeventh) + randVar;

       return mod(tempNum, n);
    }

   /** Modulo operation
   function int mod(int x, int y) {
	   var int division;
	   let division = x/y;
	   return x-(y*division);
   }*/


   ///** gets the coordinates (x,y) of a random empty square in the 16 * 8 square grid *///
   method Array getRandomEmptySquare() {

      var int xOffset; /// an offset for x - a value to add for the rand var, so we never miss a square, if exists
      var int yOffset; /// an offset for y
      let xOffset = 0;
      let yOffset = 0;

      var int xRandVal;  /// x-pixel coord (number) of a square = 32 * (rand number between 0 and 15)
      var int yRandVal;  /// x-pixel coord (number) of a square = 32 * (rand number between 0 and 7)
      let xRandVal = 32 * generatePseudoRandom(15, xOffset);
      let yRandVal = 32 * generatePseudoRandom(7, yOffset);

      while ((xOffset < 16) & (~(snake.checkIfEmpty(xRandVal, yRandVal)))) {
            let yOffset = 0;
            while ((yOffset < 8) & (~(snake.checkIfEmpty(xRandVal, yRandVal)))) {
               let yRandVal = 32 * generatePseudoRandom(7, yOffset);
               let yOffset = yOffset + 1
            }

            let xOffset = xOffset + 1
            let xRandVal = 32 * generatePseudoRandom(15, xOffset);
        }

     var Array coorArray;  /// The x-y coordinate of the empty square to return
     coorArray = Array.new(2);
     coorArray[0] = xRandVal;
     coorArray[1] = yRandVal;

     return coorArray;
   }




}



