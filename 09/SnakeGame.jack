
class SnakeGame {
   field int FOOD_INCREMENT;
   field int SCORE_INCREMENT;


   field int moveCounter;  /// counts the moves, so every 20 moves there will appear a new food
   field boolean isThereFoodNow;   /// a boolean variable for tracking existence of food on the board

   field Snake snake; // the snek of this game
   field int direction; // the snek's current direction:
                        // 0=none, 1=up, 2=down, 3=left, 4=right
   field int prevDirection; // the snek's previous direction:

   field Food food; /// current food in the game

   field int score;


   /** Constructs a new snek Game. */
   constructor SnakeGame new() {
      let snake = Snake.new();  /// Our new child-snek is born. Mazal Tov.
      let direction = 0;  /// initial state is no movement
      let prevDirection = 0;  /// initial state is no movement

      let moveCounter = 0;  /// move counter is initial 0
      let isThereFoodNow = false;  /// in the beginning, earth was formless and empty, no food. snek hungry.
      let score = 0;

      let FOOD_INCREMENT = 10; /// const. var. for delay between appearance of two foods
      let SCORE_INCREMENT = 3;

      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do snake.dispose();
      if (isThereFoodNow) {
        do food.dispose();
      }
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the snake in the current direction. */
   method void moveSnake() {
      if ((direction = 1) & (~(prevDirection = 2))) {
        do snake.moveUp(); /// Do not allow going backwards
        let prevDirection = 1;
       }
      if ((direction = 2) & (~(prevDirection = 1))) {
           do snake.moveDown();
           let prevDirection = 2;
       }
      if ((direction = 3) & (~(prevDirection = 4))) {
        do snake.moveLeft();
        let prevDirection = 3;
      }
      if ((direction = 4) & (~(prevDirection = 3))) {
        do snake.moveRight();
        let prevDirection = 4;
      }
      else {
      let direction = prevDirection; /// if there was no movement, restore the previous value of direction
      }
      
	  do Sys.wait(80);  // delays the next movement

      if (~(isThereFoodNow)){ // no food in game
		let moveCounter = moveCounter + 1;
		if ((SnakeGame.mod(moveCounter, FOOD_INCREMENT)) = 0) {
		/// Every FOOD_INCREMENT moves, create food if there is no food in game
            do createFood();
            let moveCounter = 0;
		}
	  }

	  do checkIfFoodEaten();

      return;
   }

   method void createFood() {
      var int xRandVal, yRandVal;
      var Array randValArr;

      if (~(isThereFoodNow)){
        let randValArr = getRandomEmptySquare();
        let xRandVal = randValArr[0];
        let yRandVal = randValArr[1];
		do randValArr.dispose();

        let food = Food.new(xRandVal, yRandVal); /// keep the new food created
        let isThereFoodNow = true;
      }
       return;
   }

   method void checkIfFoodEaten() {
        var int xFoodCoor, yFoodCoor;
        if (isThereFoodNow){

            let xFoodCoor = food.xCoordinateGet();
            let yFoodCoor = food.yCoordinateGet();

            if (snake.checkIfEmpty(xFoodCoor, yFoodCoor)){
                do food.dispose();
				do snake.grow();
                let isThereFoodNow = false;
                let score = score + snake.getlinksNumber();
              }
        }

        return;
   }


   /** Runs the game: handles the user's inputs and moves the snake accordingly */
   method int run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;

      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do moveSnake();
            if (snake.hitItself()) {
                let exit = true;
            }

         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow


         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveSnake();
         }

      }
     return score;
   }


   /** Generates a pseudo-random number from 0 to the n - 1, using some offset as helper **/
   ///  ...in order to make sure that we will eventually go through every number possible ///
   method int generatePseudoRandom(int n, int offSet) {
       return SnakeGame.mod((snake.getCounter()*snake.getCounter()) + offSet, n);
    }

   /** Modulo operation **/
   function int mod(int x, int y) {
	   var int division;
	   let division = x/y;
	   return Math.abs(x-(y*division));
   }


   ///** gets the coordinates (x,y) of a random empty square in the 16 * 8 square grid *///
   method Array getRandomEmptySquare() {

    var int xRandCoor, yRandCoor, xOffset, yOffset;
    var Array coorArray;  /// The x-y coordinate of the empty square to return


      let xOffset = 0;
      let yOffset = 0;

      let xRandCoor = 32 * generatePseudoRandom(16, xOffset);
      let yRandCoor = 32 * generatePseudoRandom(8, yOffset);

       while ((~(snake.checkIfEmpty(xRandCoor, yRandCoor))) & (xOffset < 0)) {
            let yOffset = 0;
            while ((~(snake.checkIfEmpty(xRandCoor, yRandCoor))) & (yOffset < 0)) {
               let yRandCoor = 32 * generatePseudoRandom(8, yOffset);
               let yOffset = yOffset + 1;
            }

            let xOffset = xOffset + 1;
            let xRandCoor = 32 * generatePseudoRandom(16, xOffset);
        }

     let coorArray = Array.new(2);
     let coorArray[0] = xRandCoor;
     let coorArray[1] = yRandCoor;

     return coorArray;
   }

}



